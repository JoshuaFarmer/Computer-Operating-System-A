	PROGRAM_SEGMENT = 0x2000
IO:
	MOV AH,0x00
	MOV DL,0x1
	INT 0x13
	MOV SI, FILENAME
	MOV DI, 0x0000
	; SI == FILE_NAME
	; DI == DESTINATION
_READ_FILE:
	MOV WORD[ES:DESTINATION],DI
	MOV WORD[ES:CURRENT_SECT],START_OF_FS
._FIND_FILE:
	CALL _FETCH_FILE
	JC FILE_NOT_FOUND

	; NAME
	MOV CX,8
	MOV DI,BX
	PUSH SI
	CALL STRNCMP
	POP SI
	JC .FOUNDFILE
	MOV CL,[ES:SIZE]
	ADD [ES:CURRENT_SECT],CL
	JLE ._FIND_FILE
	JMP FILE_NOT_FOUND
.FOUNDFILE:
	CLD
	MOV DL,[ES:disknum]
	MOV AH,0x02 ; READ FUNCTION
	MOV AL,[ES:SIZE]
	MOV CX,[ES:CURRENT_SECT]
	MOV BX,PROGRAM_SEGMENT
	MOV ES,BX
	MOV BX,[ES:DESTINATION]
	MOV DH,0x00
	INT 0x13
	JC  DISK_ERROR
	MOV BX,0x1000
	MOV ES,BX
	MOV DI,FILEFOUNDMSG
	CALL puts
.RUN:
	MOV AX,PROGRAM_SEGMENT
	MOV BX,[ES:ENTRYP]
	MOV ES,AX
	MOV byte[dat.inapp],0x01
	PUSH CS
	PUSH .EXIT
	PUSH ES
	PUSH BX
	RETF
.EXIT:
	MOV AX,0x1000
	MOV ES,AX
	RET
FILE_NOT_FOUND:
	MOV DI, FILENOTFOUNDMSG
	CALL puts
	RET
DISK_ERROR:
	MOV DI, DISKERRMSG
	CALL puts
	RET
FORMAT_ERROR:
	MOV DI, FORMATERRMSG
	CALL puts
	RET
FORMAT_ERROR2:
	MOV DI, FORMATERRMSG2
	CALL puts
	RET
FORMAT_ERROR3:
	MOV DI, FORMATERRMSG3
	CALL puts
	RET
FORMAT_ERROR4:
	MOV DI, FORMATERRMSG4
	CALL puts
	RET
STRNCMP:
	PUSHA
._LOOP:
	MOV AL, [ES:SI]
	MOV BL, [ES:DI]
	INC SI
	INC DI
	CMP AL, BL
	JNE .NE
	LOOP ._LOOP
.EQ:
	POPA
	STC
	RET
.NE:
	POPA
	CLC
	RET

_FETCH_FILE:
	CLD
	MOV DL,[ES:disknum]
	MOV AH,0x02 ; READ FUNCTION
	MOV AL,0x01 ; 1 SECTOR
	MOV BX,BUFF   ; BUFFER
	MOV CX,[ES:CURRENT_SECT]
	MOV DH,0x00
	INT 0x13
	JC  DISK_ERROR
.PARSE_HEADER:
	; END OF FS
	MOV BX,BUFF
	MOV AX,[ES:BX]
	CMP AX,0xFFFF
	JE _FILE_NOT_FOUND

	MOV BX,BUFF+8
	MOV DI,BX

	; SIGN
	PUSH SI
	MOV CX,7
	MOV SI,SIGN
	CALL STRNCMP
	POP SI
	JNC FORMAT_ERROR3

	; ENTRYP
	MOV BX,BUFF+8+7
	MOV AX,[ES:BX]
	CMP AX,0x24
	JLE FORMAT_ERROR4
	MOV [ES:ENTRYP],AX

	; VERSION
	MOV BX,BUFF+8+9
	MOV AX,[ES:BX]
	CMP AX,0x02
	JNE FORMAT_ERROR

	; SIZE
	MOV BX,BUFF+8+11
	MOV AX,[ES:BX]
	MOV BYTE[ES:SIZE],AL

	; WE DONT CARE
	MOV BX,BUFF+0x1A

	; MAGIC
	MOV AX,[ES:BX]
	CMP AX, 0xAA
	JNE FORMAT_ERROR2
	; WE DO NOT CARE ABOUT
	; DEFINED SEGMENT ANYMORE;
	; ALWAYS LOADED TO 0x8000:0000
	; Name
	MOV BX,BUFF+0x1D
	CLC
	RET

_FIND_FILE:
	CALL _FETCH_FILE
	JC _FILE_NOT_FOUND
	; NAME
	MOV CX,8
	MOV DI,BX
	PUSH SI
	CALL STRNCMP
	POP SI
	JC .FOUNDFILE
	MOV CL,[ES:SIZE]
	ADD [ES:CURRENT_SECT],CL
	CMP WORD[ES:CURRENT_SECT],8
	JMP _FIND_FILE
.FOUNDFILE:
	CLC
	RET
_FILE_NOT_FOUND:
	STC
	RET

_LIST:
	MOV WORD[ES:CURRENT_SECT],START_OF_FS
._LOOP:
	CALL _FETCH_FILE
	JC .END
	MOV DI,BUFF+0x1D
	MOV CX,8 ; 8 Letter File Names
	CALL _PRINT_FILE_NAME
	MOV CL,[ES:SIZE]
	ADD [ES:CURRENT_SECT],CL
.END:
	RET
_PRINT_FILE_NAME:
	MOV AH, 0xE
	MOV AL,[ES:DI]
	INC DI
	INT 0x10
	LOOP _PRINT_FILE_NAME
	MOV AL, 10
	INT 0x10
	MOV AL, 13
	INT 0x10
	RET

FILEFOUNDMSG:      db "FILE FOUND", 10, 13, 0
FILENOTFOUNDMSG:   db "FILE NOT FOUND", 10, 13, 0
FORMATERRMSG:      db "FILE FORMATTED INCORRECTLY", 10, 13, 0
FORMATERRMSG2:     db "CHECKSUM ERROR ON FILE", 10, 13, 0
FORMATERRMSG3:     db "INCORRECT SIGN ON FILE", 10, 13, 0
FORMATERRMSG4:     db "INVALID ENTRY POINT", 10, 13, 0
DISKERRMSG:        db "FAILED TO READ DISK", 10, 13, 0
FILENAME:          db "EXAMPLE "
SIGN:              db "COSA E",0
BUFF:    times 512 db 0
CURRENT_SECT:      dw 0
ENTRYP:            dw 0
SIZE:              dw 0
DESTINATION:       dw 0